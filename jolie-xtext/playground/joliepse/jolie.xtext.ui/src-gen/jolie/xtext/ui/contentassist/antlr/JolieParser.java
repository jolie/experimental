/*
* generated by Xtext
*/
package jolie.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import jolie.xtext.services.JolieGrammarAccess;

public class JolieParser extends AbstractContentAssistParser {
	
	@Inject
	private JolieGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected jolie.xtext.ui.contentassist.antlr.internal.InternalJolieParser createParser() {
		jolie.xtext.ui.contentassist.antlr.internal.InternalJolieParser result = new jolie.xtext.ui.contentassist.antlr.internal.InternalJolieParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProcessAccess().getAlternatives(), "rule__Process__Alternatives");
					put(grammarAccess.getBasicStatementAccess().getAlternatives(), "rule__BasicStatement__Alternatives");
					put(grammarAccess.getExpressionAccess().getOpAlternatives_1_1_0(), "rule__Expression__OpAlternatives_1_1_0");
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getVariablePathAccess().getAlternatives_1_0(), "rule__VariablePath__Alternatives_1_0");
					put(grammarAccess.getVariablePathAccess().getAlternatives_1_2_1(), "rule__VariablePath__Alternatives_1_2_1");
					put(grammarAccess.getPrefixAccess().getAlternatives(), "rule__Prefix__Alternatives");
					put(grammarAccess.getInputOperationAccess().getAlternatives(), "rule__InputOperation__Alternatives");
					put(grammarAccess.getProgramAccess().getGroup(), "rule__Program__Group__0");
					put(grammarAccess.getMainProcessAccess().getGroup(), "rule__MainProcess__Group__0");
					put(grammarAccess.getProcessAccess().getGroup_0(), "rule__Process__Group_0__0");
					put(grammarAccess.getProcessAccess().getGroup_1(), "rule__Process__Group_1__0");
					put(grammarAccess.getParallelStatementAccess().getGroup(), "rule__ParallelStatement__Group__0");
					put(grammarAccess.getParallelStatementAccess().getGroup_1(), "rule__ParallelStatement__Group_1__0");
					put(grammarAccess.getParallelStatementAccess().getGroup_1_1(), "rule__ParallelStatement__Group_1_1__0");
					put(grammarAccess.getSequenceStatementAccess().getGroup(), "rule__SequenceStatement__Group__0");
					put(grammarAccess.getSequenceStatementAccess().getGroup_1(), "rule__SequenceStatement__Group_1__0");
					put(grammarAccess.getSequenceStatementAccess().getGroup_1_1(), "rule__SequenceStatement__Group_1_1__0");
					put(grammarAccess.getBasicStatementAccess().getGroup_0(), "rule__BasicStatement__Group_0__0");
					put(grammarAccess.getBasicStatementAccess().getGroup_1(), "rule__BasicStatement__Group_1__0");
					put(grammarAccess.getBasicStatementAccess().getGroup_2(), "rule__BasicStatement__Group_2__0");
					put(grammarAccess.getAssignStatementAccess().getGroup(), "rule__AssignStatement__Group__0");
					put(grammarAccess.getRightSideAssignamentAccess().getGroup(), "rule__RightSideAssignament__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_0(), "rule__TerminalExpression__Group_0__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_1(), "rule__TerminalExpression__Group_1__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_2(), "rule__TerminalExpression__Group_2__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_3(), "rule__TerminalExpression__Group_3__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_4(), "rule__TerminalExpression__Group_4__0");
					put(grammarAccess.getVariablePathAccess().getGroup(), "rule__VariablePath__Group__0");
					put(grammarAccess.getVariablePathAccess().getGroup_1(), "rule__VariablePath__Group_1__0");
					put(grammarAccess.getVariablePathAccess().getGroup_1_1(), "rule__VariablePath__Group_1_1__0");
					put(grammarAccess.getVariablePathAccess().getGroup_1_2(), "rule__VariablePath__Group_1_2__0");
					put(grammarAccess.getVariablePathAccess().getGroup_1_2_1_1(), "rule__VariablePath__Group_1_2_1_1__0");
					put(grammarAccess.getNDChoiceStatementAccess().getGroup(), "rule__NDChoiceStatement__Group__0");
					put(grammarAccess.getNDChoiceStatementAccess().getGroup_1(), "rule__NDChoiceStatement__Group_1__0");
					put(grammarAccess.getInputOperationAccess().getGroup_0(), "rule__InputOperation__Group_0__0");
					put(grammarAccess.getInputOperationAccess().getGroup_1(), "rule__InputOperation__Group_1__0");
					put(grammarAccess.getRequestResponseOperationAccess().getGroup(), "rule__RequestResponseOperation__Group__0");
					put(grammarAccess.getProgramAccess().getMainAssignment_1(), "rule__Program__MainAssignment_1");
					put(grammarAccess.getMainAccess().getMainrocessAssignment(), "rule__Main__MainrocessAssignment");
					put(grammarAccess.getMainProcessAccess().getParallelStatementAssignment_2(), "rule__MainProcess__ParallelStatementAssignment_2");
					put(grammarAccess.getProcessAccess().getChildrenAssignment_0_2(), "rule__Process__ChildrenAssignment_0_2");
					put(grammarAccess.getProcessAccess().getChildrenAssignment_1_1(), "rule__Process__ChildrenAssignment_1_1");
					put(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_0(), "rule__ParallelStatement__ChildrenAssignment_1_0");
					put(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_1_1(), "rule__ParallelStatement__ChildrenAssignment_1_1_1");
					put(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_0(), "rule__SequenceStatement__ChildrenAssignment_1_0");
					put(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_1_1(), "rule__SequenceStatement__ChildrenAssignment_1_1_1");
					put(grammarAccess.getBasicStatementAccess().getProcessAssignment_0_1(), "rule__BasicStatement__ProcessAssignment_0_1");
					put(grammarAccess.getBasicStatementAccess().getAssignStatementAssignment_1_1(), "rule__BasicStatement__AssignStatementAssignment_1_1");
					put(grammarAccess.getBasicStatementAccess().getNDChoiceStatementAssignment_2_1(), "rule__BasicStatement__NDChoiceStatementAssignment_2_1");
					put(grammarAccess.getAssignStatementAccess().getVariablePathAssignment_1(), "rule__AssignStatement__VariablePathAssignment_1");
					put(grammarAccess.getAssignStatementAccess().getRightSideAssignAssignment_3(), "rule__AssignStatement__RightSideAssignAssignment_3");
					put(grammarAccess.getRightSideAssignamentAccess().getExpressionAssignment_1(), "rule__RightSideAssignament__ExpressionAssignment_1");
					put(grammarAccess.getExpressionAccess().getOpAssignment_1_1(), "rule__Expression__OpAssignment_1_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1(), "rule__TerminalExpression__ValueAssignment_1_1");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1(), "rule__TerminalExpression__ValueAssignment_2_1");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_3_1(), "rule__TerminalExpression__ValueAssignment_3_1");
					put(grammarAccess.getTerminalExpressionAccess().getPrefixAssignment_4_0(), "rule__TerminalExpression__PrefixAssignment_4_0");
					put(grammarAccess.getTerminalExpressionAccess().getVariablePathAssignment_4_1(), "rule__TerminalExpression__VariablePathAssignment_4_1");
					put(grammarAccess.getTerminalExpressionAccess().getPrefixAssignment_4_2(), "rule__TerminalExpression__PrefixAssignment_4_2");
					put(grammarAccess.getVariablePathAccess().getChildrenAssignment_1_1_1(), "rule__VariablePath__ChildrenAssignment_1_1_1");
					put(grammarAccess.getVariablePathAccess().getChildrenAssignment_1_2_1_1_1(), "rule__VariablePath__ChildrenAssignment_1_2_1_1_1");
					put(grammarAccess.getNDChoiceStatementAccess().getInputOperationAssignment_1_1(), "rule__NDChoiceStatement__InputOperationAssignment_1_1");
					put(grammarAccess.getNDChoiceStatementAccess().getMainProcessAssignment_1_3(), "rule__NDChoiceStatement__MainProcessAssignment_1_3");
					put(grammarAccess.getInputOperationAccess().getVariablePathAssignment_1_4(), "rule__InputOperation__VariablePathAssignment_1_4");
					put(grammarAccess.getRequestResponseOperationAccess().getExpressionAssignment_1(), "rule__RequestResponseOperation__ExpressionAssignment_1");
					put(grammarAccess.getRequestResponseOperationAccess().getMainProcessAssignment_3(), "rule__RequestResponseOperation__MainProcessAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			jolie.xtext.ui.contentassist.antlr.internal.InternalJolieParser typedParser = (jolie.xtext.ui.contentassist.antlr.internal.InternalJolieParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JolieGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JolieGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

/*
* generated by Xtext
*/
grammar InternalJolie;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package jolie.xtext.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package jolie.xtext.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import jolie.xtext.services.JolieGrammarAccess;

}

@parser::members {
 
 	private JolieGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JolieGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMain
entryRuleMain 
:
{ before(grammarAccess.getMainRule()); }
	 ruleMain
{ after(grammarAccess.getMainRule()); } 
	 EOF 
;

// Rule Main
ruleMain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainAccess().getMainrocessAssignment()); }
(rule__Main__MainrocessAssignment)
{ after(grammarAccess.getMainAccess().getMainrocessAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMainProcess
entryRuleMainProcess 
:
{ before(grammarAccess.getMainProcessRule()); }
	 ruleMainProcess
{ after(grammarAccess.getMainProcessRule()); } 
	 EOF 
;

// Rule MainProcess
ruleMainProcess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMainProcessAccess().getGroup()); }
(rule__MainProcess__Group__0)
{ after(grammarAccess.getMainProcessAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProcess
entryRuleProcess 
:
{ before(grammarAccess.getProcessRule()); }
	 ruleProcess
{ after(grammarAccess.getProcessRule()); } 
	 EOF 
;

// Rule Process
ruleProcess
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProcessAccess().getAlternatives()); }
(rule__Process__Alternatives)
{ after(grammarAccess.getProcessAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParallelStatement
entryRuleParallelStatement 
:
{ before(grammarAccess.getParallelStatementRule()); }
	 ruleParallelStatement
{ after(grammarAccess.getParallelStatementRule()); } 
	 EOF 
;

// Rule ParallelStatement
ruleParallelStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParallelStatementAccess().getGroup()); }
(rule__ParallelStatement__Group__0)
{ after(grammarAccess.getParallelStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSequenceStatement
entryRuleSequenceStatement 
:
{ before(grammarAccess.getSequenceStatementRule()); }
	 ruleSequenceStatement
{ after(grammarAccess.getSequenceStatementRule()); } 
	 EOF 
;

// Rule SequenceStatement
ruleSequenceStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSequenceStatementAccess().getGroup()); }
(rule__SequenceStatement__Group__0)
{ after(grammarAccess.getSequenceStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBasicStatement
entryRuleBasicStatement 
:
{ before(grammarAccess.getBasicStatementRule()); }
	 ruleBasicStatement
{ after(grammarAccess.getBasicStatementRule()); } 
	 EOF 
;

// Rule BasicStatement
ruleBasicStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBasicStatementAccess().getAlternatives()); }
(rule__BasicStatement__Alternatives)
{ after(grammarAccess.getBasicStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignStatement
entryRuleAssignStatement 
:
{ before(grammarAccess.getAssignStatementRule()); }
	 ruleAssignStatement
{ after(grammarAccess.getAssignStatementRule()); } 
	 EOF 
;

// Rule AssignStatement
ruleAssignStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignStatementAccess().getGroup()); }
(rule__AssignStatement__Group__0)
{ after(grammarAccess.getAssignStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostIncrementStatement
entryRulePostIncrementStatement 
:
{ before(grammarAccess.getPostIncrementStatementRule()); }
	 rulePostIncrementStatement
{ after(grammarAccess.getPostIncrementStatementRule()); } 
	 EOF 
;

// Rule PostIncrementStatement
rulePostIncrementStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostIncrementStatementAccess().getGroup()); }
(rule__PostIncrementStatement__Group__0)
{ after(grammarAccess.getPostIncrementStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostDecrementStatement
entryRulePostDecrementStatement 
:
{ before(grammarAccess.getPostDecrementStatementRule()); }
	 rulePostDecrementStatement
{ after(grammarAccess.getPostDecrementStatementRule()); } 
	 EOF 
;

// Rule PostDecrementStatement
rulePostDecrementStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostDecrementStatementAccess().getGroup()); }
(rule__PostDecrementStatement__Group__0)
{ after(grammarAccess.getPostDecrementStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression 
:
{ before(grammarAccess.getTerminalExpressionRule()); }
	 ruleTerminalExpression
{ after(grammarAccess.getTerminalExpressionRule()); } 
	 EOF 
;

// Rule TerminalExpression
ruleTerminalExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
(rule__TerminalExpression__Alternatives)
{ after(grammarAccess.getTerminalExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNDChoiceStatement
entryRuleNDChoiceStatement 
:
{ before(grammarAccess.getNDChoiceStatementRule()); }
	 ruleNDChoiceStatement
{ after(grammarAccess.getNDChoiceStatementRule()); } 
	 EOF 
;

// Rule NDChoiceStatement
ruleNDChoiceStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getGroup()); }
(rule__NDChoiceStatement__Group__0)
{ after(grammarAccess.getNDChoiceStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputOperation
entryRuleInputOperation 
:
{ before(grammarAccess.getInputOperationRule()); }
	 ruleInputOperation
{ after(grammarAccess.getInputOperationRule()); } 
	 EOF 
;

// Rule InputOperation
ruleInputOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputOperationAccess().getAlternatives()); }
(rule__InputOperation__Alternatives)
{ after(grammarAccess.getInputOperationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariablePath
entryRuleVariablePath 
:
{ before(grammarAccess.getVariablePathRule()); }
	 ruleVariablePath
{ after(grammarAccess.getVariablePathRule()); } 
	 EOF 
;

// Rule VariablePath
ruleVariablePath
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariablePathAccess().getGroup()); }
(rule__VariablePath__Group__0)
{ after(grammarAccess.getVariablePathAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRequestResponseOperation
entryRuleRequestResponseOperation 
:
{ before(grammarAccess.getRequestResponseOperationRule()); }
	 ruleRequestResponseOperation
{ after(grammarAccess.getRequestResponseOperationRule()); } 
	 EOF 
;

// Rule RequestResponseOperation
ruleRequestResponseOperation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getGroup()); }
(rule__RequestResponseOperation__Group__0)
{ after(grammarAccess.getRequestResponseOperationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Process__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getGroup_0()); }
(rule__Process__Group_0__0)
{ after(grammarAccess.getProcessAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getProcessAccess().getGroup_1()); }
(rule__Process__Group_1__0)
{ after(grammarAccess.getProcessAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getGroup_0()); }
(rule__BasicStatement__Group_0__0)
{ after(grammarAccess.getBasicStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBasicStatementAccess().getGroup_1()); }
(rule__BasicStatement__Group_1__0)
{ after(grammarAccess.getBasicStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getBasicStatementAccess().getGroup_2()); }
(rule__BasicStatement__Group_2__0)
{ after(grammarAccess.getBasicStatementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getBasicStatementAccess().getGroup_3()); }
(rule__BasicStatement__Group_3__0)
{ after(grammarAccess.getBasicStatementAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getBasicStatementAccess().getGroup_4()); }
(rule__BasicStatement__Group_4__0)
{ after(grammarAccess.getBasicStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpPLUSTerminalRuleCall_1_1_0_0()); }
	RULE_PLUS
{ after(grammarAccess.getExpressionAccess().getOpPLUSTerminalRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getOpMINUSTerminalRuleCall_1_1_0_1()); }
	RULE_MINUS
{ after(grammarAccess.getExpressionAccess().getOpMINUSTerminalRuleCall_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getOpASTERISKTerminalRuleCall_1_1_0_2()); }
	RULE_ASTERISK
{ after(grammarAccess.getExpressionAccess().getOpASTERISKTerminalRuleCall_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getOpDIVIDETerminalRuleCall_1_1_0_3()); }
	RULE_DIVIDE
{ after(grammarAccess.getExpressionAccess().getOpDIVIDETerminalRuleCall_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
(rule__TerminalExpression__Group_0__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
(rule__TerminalExpression__Group_1__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
(rule__TerminalExpression__Group_2__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_3()); }
(rule__TerminalExpression__Group_3__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getTerminalExpressionAccess().getGroup_4()); }
(rule__TerminalExpression__Group_4__0)
{ after(grammarAccess.getTerminalExpressionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getGroup_0()); }
(rule__InputOperation__Group_0__0)
{ after(grammarAccess.getInputOperationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getInputOperationAccess().getGroup_1()); }
(rule__InputOperation__Group_1__0)
{ after(grammarAccess.getInputOperationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getIDTerminalRuleCall_2_1_0()); }
	RULE_ID
{ after(grammarAccess.getVariablePathAccess().getIDTerminalRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getVariablePathAccess().getGroup_2_1_1()); }
(rule__VariablePath__Group_2_1_1__0)
{ after(grammarAccess.getVariablePathAccess().getGroup_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMainKeyword_0()); }

	'main' 

{ after(grammarAccess.getProgramAccess().getMainKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMainAssignment_1()); }
(rule__Program__MainAssignment_1)
{ after(grammarAccess.getProgramAccess().getMainAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MainProcess__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainProcess__Group__0__Impl
	rule__MainProcess__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcess__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainProcessAccess().getOLSyntaxNodeAction_0()); }
(

)
{ after(grammarAccess.getMainProcessAccess().getOLSyntaxNodeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainProcess__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainProcess__Group__1__Impl
	rule__MainProcess__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcess__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainProcessAccess().getLCURLYTerminalRuleCall_1()); }
	RULE_LCURLY
{ after(grammarAccess.getMainProcessAccess().getLCURLYTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainProcess__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainProcess__Group__2__Impl
	rule__MainProcess__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcess__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainProcessAccess().getParallelStatementAssignment_2()); }
(rule__MainProcess__ParallelStatementAssignment_2)
{ after(grammarAccess.getMainProcessAccess().getParallelStatementAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MainProcess__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MainProcess__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcess__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainProcessAccess().getRCURLYTerminalRuleCall_3()); }
	RULE_RCURLY
{ after(grammarAccess.getMainProcessAccess().getRCURLYTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Process__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_0__0__Impl
	rule__Process__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getProcessAction_0_0()); }
(

)
{ after(grammarAccess.getProcessAccess().getProcessAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_0__1__Impl
	rule__Process__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getLCURLYTerminalRuleCall_0_1()); }
	RULE_LCURLY
{ after(grammarAccess.getProcessAccess().getLCURLYTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_0__2__Impl
	rule__Process__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getChildrenAssignment_0_2()); }
(rule__Process__ChildrenAssignment_0_2)
{ after(grammarAccess.getProcessAccess().getChildrenAssignment_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getRCURLYTerminalRuleCall_0_3()); }
	RULE_RCURLY
{ after(grammarAccess.getProcessAccess().getRCURLYTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Process__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_1__0__Impl
	rule__Process__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getLPARENTerminalRuleCall_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getProcessAccess().getLPARENTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_1__1__Impl
	rule__Process__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getChildrenAssignment_1_1()); }
(rule__Process__ChildrenAssignment_1_1)
{ after(grammarAccess.getProcessAccess().getChildrenAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Process__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Process__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Process__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getRPARENTerminalRuleCall_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getProcessAccess().getRPARENTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ParallelStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group__0__Impl
	rule__ParallelStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getParallelStatementAction_0()); }
(

)
{ after(grammarAccess.getParallelStatementAccess().getParallelStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getGroup_1()); }
(rule__ParallelStatement__Group_1__0)
{ after(grammarAccess.getParallelStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group_1__0__Impl
	rule__ParallelStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_0()); }
(rule__ParallelStatement__ChildrenAssignment_1_0)
{ after(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getGroup_1_1()); }
(rule__ParallelStatement__Group_1_1__0)*
{ after(grammarAccess.getParallelStatementAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParallelStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group_1_1__0__Impl
	rule__ParallelStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getVERTTerminalRuleCall_1_1_0()); }
	RULE_VERT
{ after(grammarAccess.getParallelStatementAccess().getVERTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParallelStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParallelStatement__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_1_1()); }
(rule__ParallelStatement__ChildrenAssignment_1_1_1)
{ after(grammarAccess.getParallelStatementAccess().getChildrenAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group__0__Impl
	rule__SequenceStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getSequenceStatementAction_0()); }
(

)
{ after(grammarAccess.getSequenceStatementAccess().getSequenceStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getGroup_1()); }
(rule__SequenceStatement__Group_1__0)
{ after(grammarAccess.getSequenceStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group_1__0__Impl
	rule__SequenceStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_0()); }
(rule__SequenceStatement__ChildrenAssignment_1_0)
{ after(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getGroup_1_1()); }
(rule__SequenceStatement__Group_1_1__0)*
{ after(grammarAccess.getSequenceStatementAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SequenceStatement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group_1_1__0__Impl
	rule__SequenceStatement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getSEMICOLONTerminalRuleCall_1_1_0()); }
	RULE_SEMICOLON
{ after(grammarAccess.getSequenceStatementAccess().getSEMICOLONTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SequenceStatement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SequenceStatement__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_1_1()); }
(rule__SequenceStatement__ChildrenAssignment_1_1_1)
{ after(grammarAccess.getSequenceStatementAccess().getChildrenAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_0__0__Impl
	rule__BasicStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getProcessAction_0_0()); }
(

)
{ after(grammarAccess.getBasicStatementAccess().getProcessAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getProcessAssignment_0_1()); }
(rule__BasicStatement__ProcessAssignment_0_1)
{ after(grammarAccess.getBasicStatementAccess().getProcessAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_1__0__Impl
	rule__BasicStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getAssignStatementAction_1_0()); }
(

)
{ after(grammarAccess.getBasicStatementAccess().getAssignStatementAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getAssignStatementAssignment_1_1()); }
(rule__BasicStatement__AssignStatementAssignment_1_1)
{ after(grammarAccess.getBasicStatementAccess().getAssignStatementAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_2__0__Impl
	rule__BasicStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostIncrementStatementAction_2_0()); }
(

)
{ after(grammarAccess.getBasicStatementAccess().getPostIncrementStatementAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostIncrementStatementAssignment_2_1()); }
(rule__BasicStatement__PostIncrementStatementAssignment_2_1)
{ after(grammarAccess.getBasicStatementAccess().getPostIncrementStatementAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_3__0__Impl
	rule__BasicStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostDecrementStatementAction_3_0()); }
(

)
{ after(grammarAccess.getBasicStatementAccess().getPostDecrementStatementAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostDecrementStatementAssignment_3_1()); }
(rule__BasicStatement__PostDecrementStatementAssignment_3_1)
{ after(grammarAccess.getBasicStatementAccess().getPostDecrementStatementAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BasicStatement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_4__0__Impl
	rule__BasicStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getNDChoiceStatementAction_4_0()); }
(

)
{ after(grammarAccess.getBasicStatementAccess().getNDChoiceStatementAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BasicStatement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BasicStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getNDChoiceStatementAssignment_4_1()); }
(rule__BasicStatement__NDChoiceStatementAssignment_4_1)
{ after(grammarAccess.getBasicStatementAccess().getNDChoiceStatementAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AssignStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__0__Impl
	rule__AssignStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getAssignStatementAction_0()); }
(

)
{ after(grammarAccess.getAssignStatementAccess().getAssignStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__1__Impl
	rule__AssignStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getNameAssignment_1()); }
(rule__AssignStatement__NameAssignment_1)
{ after(grammarAccess.getAssignStatementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__2__Impl
	rule__AssignStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getASSIGNTerminalRuleCall_2()); }
	RULE_ASSIGN
{ after(grammarAccess.getAssignStatementAccess().getASSIGNTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__3__Impl
	rule__AssignStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getExpressionAction_3()); }
(

)
{ after(grammarAccess.getAssignStatementAccess().getExpressionAction_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AssignStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AssignStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getExpressionAssignment_4()); }
(rule__AssignStatement__ExpressionAssignment_4)
{ after(grammarAccess.getAssignStatementAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__PostIncrementStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementStatement__Group__0__Impl
	rule__PostIncrementStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementStatementAccess().getPostIncrementStatementAction_0()); }
(

)
{ after(grammarAccess.getPostIncrementStatementAccess().getPostIncrementStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostIncrementStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementStatement__Group__1__Impl
	rule__PostIncrementStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementStatementAccess().getNameAssignment_1()); }
(rule__PostIncrementStatement__NameAssignment_1)
{ after(grammarAccess.getPostIncrementStatementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostIncrementStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostIncrementStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementStatementAccess().getCHOICETerminalRuleCall_2()); }
	RULE_CHOICE
{ after(grammarAccess.getPostIncrementStatementAccess().getCHOICETerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PostDecrementStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostDecrementStatement__Group__0__Impl
	rule__PostDecrementStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrementStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostDecrementStatementAccess().getPostDecrementStatementAction_0()); }
(

)
{ after(grammarAccess.getPostDecrementStatementAccess().getPostDecrementStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostDecrementStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostDecrementStatement__Group__1__Impl
	rule__PostDecrementStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrementStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostDecrementStatementAccess().getNameAssignment_1()); }
(rule__PostDecrementStatement__NameAssignment_1)
{ after(grammarAccess.getPostDecrementStatementAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostDecrementStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostDecrementStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrementStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostDecrementStatementAccess().getDECREMENTTerminalRuleCall_2()); }
	RULE_DECREMENT
{ after(grammarAccess.getPostDecrementStatementAccess().getDECREMENTTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); }
	ruleTerminalExpression
{ after(grammarAccess.getExpressionAccess().getTerminalExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
(rule__Expression__Group_1__0)?
{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOperationLeftAction_1_0()); }
(

)
{ after(grammarAccess.getExpressionAccess().getOperationLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpAssignment_1_1()); }
(rule__Expression__OpAssignment_1_1)
{ after(grammarAccess.getExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
(rule__Expression__RightAssignment_1_2)
{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalExpression__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__0__Impl
	rule__TerminalExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getLPARENTerminalRuleCall_0_0()); }
	RULE_LPAREN
{ after(grammarAccess.getTerminalExpressionAccess().getLPARENTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__1__Impl
	rule__TerminalExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getRPARENTerminalRuleCall_0_2()); }
	RULE_RPAREN
{ after(grammarAccess.getTerminalExpressionAccess().getRPARENTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TerminalExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_1__0__Impl
	rule__TerminalExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_1_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getIntLiteralAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
(rule__TerminalExpression__ValueAssignment_1_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_2__0__Impl
	rule__TerminalExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getRealLiteralAction_2_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getRealLiteralAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
(rule__TerminalExpression__ValueAssignment_2_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_3__0__Impl
	rule__TerminalExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getStringAction_3_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getStringAction_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_3_1()); }
(rule__TerminalExpression__ValueAssignment_3_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TerminalExpression__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_4__0__Impl
	rule__TerminalExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getStringAction_4_0()); }
(

)
{ after(grammarAccess.getTerminalExpressionAccess().getStringAction_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TerminalExpression__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TerminalExpression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueAssignment_4_1()); }
(rule__TerminalExpression__ValueAssignment_4_1)
{ after(grammarAccess.getTerminalExpressionAccess().getValueAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NDChoiceStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group__0__Impl
	rule__NDChoiceStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getNDChoiceStatementAction_0()); }
(

)
{ after(grammarAccess.getNDChoiceStatementAccess().getNDChoiceStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NDChoiceStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getGroup_1()); }
(rule__NDChoiceStatement__Group_1__0)*
{ after(grammarAccess.getNDChoiceStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NDChoiceStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group_1__0__Impl
	rule__NDChoiceStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getLSQUARETerminalRuleCall_1_0()); }
	RULE_LSQUARE
{ after(grammarAccess.getNDChoiceStatementAccess().getLSQUARETerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NDChoiceStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group_1__1__Impl
	rule__NDChoiceStatement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getInputOperationAssignment_1_1()); }
(rule__NDChoiceStatement__InputOperationAssignment_1_1)
{ after(grammarAccess.getNDChoiceStatementAccess().getInputOperationAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NDChoiceStatement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group_1__2__Impl
	rule__NDChoiceStatement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getRSQUARETerminalRuleCall_1_2()); }
	RULE_RSQUARE
{ after(grammarAccess.getNDChoiceStatementAccess().getRSQUARETerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NDChoiceStatement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NDChoiceStatement__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getMainProcessAssignment_1_3()); }
(rule__NDChoiceStatement__MainProcessAssignment_1_3)
{ after(grammarAccess.getNDChoiceStatementAccess().getMainProcessAssignment_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__InputOperation__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_0__0__Impl
	rule__InputOperation__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getInputOperationAction_0_0()); }
(

)
{ after(grammarAccess.getInputOperationAccess().getInputOperationAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_0__1__Impl
	rule__InputOperation__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getLINKINTerminalRuleCall_0_1()); }
	RULE_LINKIN
{ after(grammarAccess.getInputOperationAccess().getLINKINTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_0__2__Impl
	rule__InputOperation__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getLPARENTerminalRuleCall_0_2()); }
	RULE_LPAREN
{ after(grammarAccess.getInputOperationAccess().getLPARENTerminalRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_0__3__Impl
	rule__InputOperation__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getIDTerminalRuleCall_0_3()); }
	RULE_ID
{ after(grammarAccess.getInputOperationAccess().getIDTerminalRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getRPARENTerminalRuleCall_0_4()); }
	RULE_RPAREN
{ after(grammarAccess.getInputOperationAccess().getRPARENTerminalRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__InputOperation__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__0__Impl
	rule__InputOperation__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getInputOperationAction_1_0()); }
(

)
{ after(grammarAccess.getInputOperationAccess().getInputOperationAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__1__Impl
	rule__InputOperation__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getInputOperationAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__2__Impl
	rule__InputOperation__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getLPARENTerminalRuleCall_1_2()); }
	RULE_LPAREN
{ after(grammarAccess.getInputOperationAccess().getLPARENTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__3__Impl
	rule__InputOperation__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getVariablePathAction_1_3()); }
(

)
{ after(grammarAccess.getInputOperationAccess().getVariablePathAction_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__4__Impl
	rule__InputOperation__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getVariablePathAssignment_1_4()); }
(rule__InputOperation__VariablePathAssignment_1_4)
{ after(grammarAccess.getInputOperationAccess().getVariablePathAssignment_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__5__Impl
	rule__InputOperation__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getRPARENTerminalRuleCall_1_5()); }
	RULE_RPAREN
{ after(grammarAccess.getInputOperationAccess().getRPARENTerminalRuleCall_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputOperation__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputOperation__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getRequestResponseOperationParserRuleCall_1_6()); }
(	ruleRequestResponseOperation)?
{ after(grammarAccess.getInputOperationAccess().getRequestResponseOperationParserRuleCall_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__VariablePath__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group__0__Impl
	rule__VariablePath__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getVariablePathAction_0()); }
(

)
{ after(grammarAccess.getVariablePathAccess().getVariablePathAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariablePath__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group__1__Impl
	rule__VariablePath__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getGLOBALTerminalRuleCall_1()); }
	RULE_GLOBAL
{ after(grammarAccess.getVariablePathAccess().getGLOBALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariablePath__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getGroup_2()); }
(rule__VariablePath__Group_2__0)*
{ after(grammarAccess.getVariablePathAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VariablePath__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group_2__0__Impl
	rule__VariablePath__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getDOTTerminalRuleCall_2_0()); }
	RULE_DOT
{ after(grammarAccess.getVariablePathAccess().getDOTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariablePath__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getAlternatives_2_1()); }
(rule__VariablePath__Alternatives_2_1)
{ after(grammarAccess.getVariablePathAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VariablePath__Group_2_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group_2_1_1__0__Impl
	rule__VariablePath__Group_2_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group_2_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getLPARENTerminalRuleCall_2_1_1_0()); }
	RULE_LPAREN
{ after(grammarAccess.getVariablePathAccess().getLPARENTerminalRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariablePath__Group_2_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group_2_1_1__1__Impl
	rule__VariablePath__Group_2_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group_2_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getChildrenAssignment_2_1_1_1()); }
(rule__VariablePath__ChildrenAssignment_2_1_1_1)
{ after(grammarAccess.getVariablePathAccess().getChildrenAssignment_2_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariablePath__Group_2_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariablePath__Group_2_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__Group_2_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getRPARENTerminalRuleCall_2_1_1_2()); }
	RULE_RPAREN
{ after(grammarAccess.getVariablePathAccess().getRPARENTerminalRuleCall_2_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RequestResponseOperation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequestResponseOperation__Group__0__Impl
	rule__RequestResponseOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getLPARENTerminalRuleCall_0()); }
	RULE_LPAREN
{ after(grammarAccess.getRequestResponseOperationAccess().getLPARENTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequestResponseOperation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequestResponseOperation__Group__1__Impl
	rule__RequestResponseOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getExpressionAssignment_1()); }
(rule__RequestResponseOperation__ExpressionAssignment_1)
{ after(grammarAccess.getRequestResponseOperationAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequestResponseOperation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequestResponseOperation__Group__2__Impl
	rule__RequestResponseOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getRPARENTerminalRuleCall_2()); }
	RULE_RPAREN
{ after(grammarAccess.getRequestResponseOperationAccess().getRPARENTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RequestResponseOperation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RequestResponseOperation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getMainProcessAssignment_3()); }
(rule__RequestResponseOperation__MainProcessAssignment_3)
{ after(grammarAccess.getRequestResponseOperationAccess().getMainProcessAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Program__MainAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getMainMainParserRuleCall_1_0()); }
	ruleMain{ after(grammarAccess.getProgramAccess().getMainMainParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Main__MainrocessAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainAccess().getMainrocessMainProcessParserRuleCall_0()); }
	ruleMainProcess{ after(grammarAccess.getMainAccess().getMainrocessMainProcessParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MainProcess__ParallelStatementAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMainProcessAccess().getParallelStatementParallelStatementParserRuleCall_2_0()); }
	ruleParallelStatement{ after(grammarAccess.getMainProcessAccess().getParallelStatementParallelStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__ChildrenAssignment_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getChildrenParallelStatementParserRuleCall_0_2_0()); }
	ruleParallelStatement{ after(grammarAccess.getProcessAccess().getChildrenParallelStatementParserRuleCall_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Process__ChildrenAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProcessAccess().getChildrenParallelStatementParserRuleCall_1_1_0()); }
	ruleParallelStatement{ after(grammarAccess.getProcessAccess().getChildrenParallelStatementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__ChildrenAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getChildrenSequenceStatementParserRuleCall_1_0_0()); }
	ruleSequenceStatement{ after(grammarAccess.getParallelStatementAccess().getChildrenSequenceStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParallelStatement__ChildrenAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParallelStatementAccess().getChildrenSequenceStatementParserRuleCall_1_1_1_0()); }
	ruleSequenceStatement{ after(grammarAccess.getParallelStatementAccess().getChildrenSequenceStatementParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__ChildrenAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getChildrenBasicStatementParserRuleCall_1_0_0()); }
	ruleBasicStatement{ after(grammarAccess.getSequenceStatementAccess().getChildrenBasicStatementParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SequenceStatement__ChildrenAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSequenceStatementAccess().getChildrenBasicStatementParserRuleCall_1_1_1_0()); }
	ruleBasicStatement{ after(grammarAccess.getSequenceStatementAccess().getChildrenBasicStatementParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__ProcessAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getProcessProcessParserRuleCall_0_1_0()); }
	ruleProcess{ after(grammarAccess.getBasicStatementAccess().getProcessProcessParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__AssignStatementAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getAssignStatementAssignStatementParserRuleCall_1_1_0()); }
	ruleAssignStatement{ after(grammarAccess.getBasicStatementAccess().getAssignStatementAssignStatementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__PostIncrementStatementAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostIncrementStatementPostIncrementStatementParserRuleCall_2_1_0()); }
	rulePostIncrementStatement{ after(grammarAccess.getBasicStatementAccess().getPostIncrementStatementPostIncrementStatementParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__PostDecrementStatementAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getPostDecrementStatementPostDecrementStatementParserRuleCall_3_1_0()); }
	rulePostDecrementStatement{ after(grammarAccess.getBasicStatementAccess().getPostDecrementStatementPostDecrementStatementParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BasicStatement__NDChoiceStatementAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBasicStatementAccess().getNDChoiceStatementNDChoiceStatementParserRuleCall_4_1_0()); }
	ruleNDChoiceStatement{ after(grammarAccess.getBasicStatementAccess().getNDChoiceStatementNDChoiceStatementParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getAssignStatementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AssignStatement__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignStatementAccess().getExpressionExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getAssignStatementAccess().getExpressionExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostIncrementStatement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostIncrementStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPostIncrementStatementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostDecrementStatement__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostDecrementStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getPostDecrementStatementAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getOpAlternatives_1_1_0()); }
(rule__Expression__OpAlternatives_1_1_0)
{ after(grammarAccess.getExpressionAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getExpressionAccess().getRightExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_1_1_0()); }
	RULE_INT{ after(grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueREALTerminalRuleCall_2_1_0()); }
	RULE_REAL{ after(grammarAccess.getTerminalExpressionAccess().getValueREALTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueIDTerminalRuleCall_3_1_0()); }
	RULE_ID{ after(grammarAccess.getTerminalExpressionAccess().getValueIDTerminalRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TerminalExpression__ValueAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_4_1_0()); }
	RULE_STRING{ after(grammarAccess.getTerminalExpressionAccess().getValueSTRINGTerminalRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__InputOperationAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getInputOperationInputOperationParserRuleCall_1_1_0()); }
	ruleInputOperation{ after(grammarAccess.getNDChoiceStatementAccess().getInputOperationInputOperationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NDChoiceStatement__MainProcessAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNDChoiceStatementAccess().getMainProcessMainProcessParserRuleCall_1_3_0()); }
	ruleMainProcess{ after(grammarAccess.getNDChoiceStatementAccess().getMainProcessMainProcessParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputOperation__VariablePathAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputOperationAccess().getVariablePathVariablePathParserRuleCall_1_4_0()); }
	ruleVariablePath{ after(grammarAccess.getInputOperationAccess().getVariablePathVariablePathParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VariablePath__ChildrenAssignment_2_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariablePathAccess().getChildrenExpressionParserRuleCall_2_1_1_1_0()); }
	ruleExpression{ after(grammarAccess.getVariablePathAccess().getChildrenExpressionParserRuleCall_2_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getRequestResponseOperationAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RequestResponseOperation__MainProcessAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRequestResponseOperationAccess().getMainProcessMainProcessParserRuleCall_3_0()); }
	ruleMainProcess{ after(grammarAccess.getRequestResponseOperationAccess().getMainProcessMainProcessParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_LCURLY : '{';

RULE_RCURLY : '}';

RULE_LSQUARE : '[';

RULE_RSQUARE : ']';

RULE_ARROW : '->';

RULE_SEMICOLON : ';';

RULE_COLON : ':';

RULE_PLUS : '+';

RULE_VERT : '|';

RULE_ASSIGN : '=';

RULE_DOT : '.';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_COMMA : ',';

RULE_LINKIN : 'linkIn';

RULE_WHILE : 'while';

RULE_CHOICE : '++';

RULE_DECREMENT : '--';

RULE_ASTERISK : '*';

RULE_DIVIDE : '/';

RULE_MINUS : '-';

RULE_PERCENT_SIGN : '%';

RULE_GLOBAL : 'global';

RULE_REAL : ('0'..'9')* '.' ('0'..'9')+ (('e'|'E') ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



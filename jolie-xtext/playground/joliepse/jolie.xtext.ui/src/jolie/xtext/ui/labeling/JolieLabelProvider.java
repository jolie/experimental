/*
* generated by Xtext
*/
package jolie.xtext.ui.labeling;

import jolie.xtext.jolie.Define;
import jolie.xtext.jolie.InputPortStatement;
import jolie.xtext.jolie.Interface;
import jolie.xtext.jolie.Main;
import jolie.xtext.jolie.Native_type;
import jolie.xtext.jolie.OneWayOperationSignature;
import jolie.xtext.jolie.OutputPortStatement;
import jolie.xtext.jolie.RequestResponseSignature;
import jolie.xtext.jolie.Type;
import jolie.xtext.jolie.With;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;

import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class JolieLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public JolieLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

/*
	//Labels and icons can be computed like this:
	
	String text(MyModel ele) {
	  return "my "+ele.getName();
	}
	 
    String image(MyModel ele) {
      return "MyModel.gif";
    }
*/
	 String image(Type ele) {
	    	return "type.gif";
	    }
	 
	 String image(Native_type ele) {
	    	return "typeN.gif";
	    }
	 
	 String text(Type ele) {
		  return "Type:"+ele.getName();
		}
	 
	 String image(Main ele) {
	    	return "home_nav.gif";
	    }
	 String image(InputPortStatement ele) {
	    	return "door_in.png";
	    }
	 String image(OutputPortStatement ele) {
	    	return "door_out.png";
	    }
	 String image(With ele) {
	    	return "door_out.png";
	    }
	 String image(Define ele) {
	    	return "define.png";
	    }
	 String image(Interface ele) {
	    	return "interface.png";
	    }
	 String image(OneWayOperationSignature ele) {
	    	return "one_way.png";
	    }
	 String image(RequestResponseSignature ele) {
	    	return "req_res.png";
	    }
}

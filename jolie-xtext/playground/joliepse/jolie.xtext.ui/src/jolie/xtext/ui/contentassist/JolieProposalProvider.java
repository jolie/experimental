/*
 * generated by Xtext
 */
package jolie.xtext.ui.contentassist;



import java.util.StringTokenizer;


import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;


import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceDescriptions;

import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.google.inject.Inject;

import jolie.xtext.ui.contentassist.AbstractJolieProposalProvider;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class JolieProposalProvider extends AbstractJolieProposalProvider {

	@Inject
	private IResourceDescriptions descriptions;

	// TODO Inserire percorso da cui provengono le proposte (utile per le op)

	// Proposals file to include
	@Override
	public void completeInclude_ImportURI(EObject model, Assignment assignment,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		super.completeInclude_ImportURI(model, assignment, context, acceptor);

		String proposal = "";

		ICompletionProposal completionProposal;

		Iterable<IResourceDescription> allResourceDescriptions = descriptions
		.getAllResourceDescriptions();

		StringTokenizer st = new StringTokenizer(model.eResource().getURI()
				.toString(), "/");
		st.nextToken();
		st.nextToken();
		String inputProjectName = st.nextToken();

		for (IResourceDescription description : allResourceDescriptions) {
            //Add libraries
			if (description.getURI().toString()
					.contains("JolieIncludedLibraries")) {

				proposal = '"' + description.getURI().lastSegment() ;
				completionProposal = createCompletionProposal(proposal, context);
		
				acceptor.accept(completionProposal);
			}

			StringTokenizer st2 = new StringTokenizer(description.getURI()
					.toString(), "/");
			st2.nextToken();
			st2.nextToken();
			String projectName = st2.nextToken();

			//Add this project files
			if (projectName.equals(inputProjectName)&&(!model.eResource().getURI().toString().equals(description.getURI().toString()))){
				
				proposal = '"' + description.getURI().lastSegment() + '"';
				completionProposal = createCompletionProposal(proposal, context);
				acceptor.accept(completionProposal);
			}
				

		}

	}

	// return descriptions of resources in the same directory
	public void sameProjectResourceDescription(URI uri) {
		// List<IResourceDescription> sameProjectDescription = new
		// ArrayList<IResourceDescription>();

		// return sameProjectDescription;

		// IProject project =
		// ResourcesPlugin.getWorkspace().getRoot().getProject();

	}

	@Override
	public void completeAssignStatementOrPostIncrementDecrementOrInputOperation_RightSide(
			EObject model, Assignment assignment, ContentAssistContext context,
			final ICompletionProposalAcceptor acceptor) {
		super.completeAssignStatementOrPostIncrementDecrementOrInputOperation_RightSide(
				model, assignment, context, acceptor);

		/*
		 * public void accept(ICompletionProposal proposal) { if (proposal
		 * instanceof ConfigurableCompletionProposal) {
		 * ConfigurableCompletionProposal ccp = (ConfigurableCompletionProposal)
		 * proposal; String string = ccp.getReplacementString(); int
		 * indexOfOpenPar = string.indexOf('('); if (indexOfOpenPar!=-1) { int
		 * oldSelectionStart = ccp.getSelectionStart();
		 * ccp.setSelectionStart(oldSelectionStart
		 * -string.length()+indexOfOpenPar+1);
		 * ccp.setSelectionLength(oldSelectionStart-ccp.getSelectionStart()-1);
		 * } } acceptor.accept(proposal);
		 */

		String proposal = "++";
		// convert it to a valid STRING-terminal
		// proposal = getValueConverter().toString(proposal, "STRING");
		// create the completion proposal
		// the result may be null as the createCompletionProposal(..) methods
		// check for valid prefixes
		// and terminal token conflicts
		ICompletionProposal completionProposal = createCompletionProposal(
				proposal, context);
		acceptor.accept(completionProposal);

		proposal = " = ";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = "++";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = "--";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = "@";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = " -> ";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = " << ";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

		proposal = "[  ";
		completionProposal = createCompletionProposal(proposal, context);
		// register the proposal, the acceptor handles null-values gracefully
		acceptor.accept(completionProposal);

	}

}

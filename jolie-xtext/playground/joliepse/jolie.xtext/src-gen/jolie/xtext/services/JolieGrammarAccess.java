/*
* generated by Xtext
*/

package jolie.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JolieGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMainAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainMainParserRuleCall_1_0 = (RuleCall)cMainAssignment_1.eContents().get(0);
		
		//Program: / * (locations=Locations)* * / "main" main=Main;
		public ParserRule getRule() { return rule; }

		/// * (locations=Locations)* * / "main" main=Main
		public Group getGroup() { return cGroup; }

		/// * (locations=Locations)* * / "main"
		public Keyword getMainKeyword_0() { return cMainKeyword_0; }

		//main=Main
		public Assignment getMainAssignment_1() { return cMainAssignment_1; }

		//Main
		public RuleCall getMainMainParserRuleCall_1_0() { return cMainMainParserRuleCall_1_0; }
	}

	public class MainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Main");
		private final Assignment cMainrocessAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainrocessMainProcessParserRuleCall_0 = (RuleCall)cMainrocessAssignment.eContents().get(0);
		
		/// *  
		//Locations :
		//ASSIGN
		// ('inputPort' name=ID LCURLY (locations=LocationDefinition) RCURLY) &
		// ('outputPort' name=ID LCURLY (locations=LocationDefinition) RCURLY)
		//
		//;
		//
		//LocationDefinition :
		// ('location' address=Address) & 'protocol' (protocol=Protocol) & (interfaces=Interfaces)*
		//;
		//
		//
		//Interfaces :
		// 'Interfaces' name=ID
		//;
		//
		//terminal Protocol :
		// 'sodep' | 'soap' | 'http'
		//;  
		// 
		//terminal Address : 
		// '"'('//') ((('a'..'z'|'A'..'Z'|'_'|'0'..'9')*'.'('a'..'z'|'A'..'Z'|'_'|'0'..'9')*)*':'('0'..'9')*) '"'
		//
		// ;
		// * /Main:
		//	mainrocess=MainProcess;
		public ParserRule getRule() { return rule; }

		//mainrocess=MainProcess
		public Assignment getMainrocessAssignment() { return cMainrocessAssignment; }

		//MainProcess
		public RuleCall getMainrocessMainProcessParserRuleCall_0() { return cMainrocessMainProcessParserRuleCall_0; }
	}

	public class MainProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainProcess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOLSyntaxNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParallelStatementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParallelStatementParallelStatementParserRuleCall_2_0 = (RuleCall)cParallelStatementAssignment_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////Il processo principale, {...} del main
		//MainProcess:
		//	{OLSyntaxNode} LCURLY parallelStatement=ParallelStatement RCURLY;
		public ParserRule getRule() { return rule; }

		//{OLSyntaxNode} LCURLY parallelStatement=ParallelStatement RCURLY
		public Group getGroup() { return cGroup; }

		//{OLSyntaxNode}
		public Action getOLSyntaxNodeAction_0() { return cOLSyntaxNodeAction_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_1() { return cLCURLYTerminalRuleCall_1; }

		//parallelStatement=ParallelStatement
		public Assignment getParallelStatementAssignment_2() { return cParallelStatementAssignment_2; }

		//ParallelStatement
		public RuleCall getParallelStatementParallelStatementParserRuleCall_2_0() { return cParallelStatementParallelStatementParserRuleCall_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_3() { return cRCURLYTerminalRuleCall_3; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLCURLYTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cChildrenAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cChildrenParallelStatementParserRuleCall_0_2_0 = (RuleCall)cChildrenAssignment_0_2.eContents().get(0);
		private final RuleCall cRCURLYTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cChildrenParallelStatementParserRuleCall_1_1_0 = (RuleCall)cChildrenAssignment_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		////Il processo generale inseribile a piacimento nel codice {...},(...)
		//Process:
		//	{Process} LCURLY children+=ParallelStatement RCURLY | LPAREN children+=ParallelStatement RPAREN;
		public ParserRule getRule() { return rule; }

		//{Process} LCURLY children+=ParallelStatement RCURLY | LPAREN children+=ParallelStatement RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Process} LCURLY children+=ParallelStatement RCURLY
		public Group getGroup_0() { return cGroup_0; }

		//{Process}
		public Action getProcessAction_0_0() { return cProcessAction_0_0; }

		//LCURLY
		public RuleCall getLCURLYTerminalRuleCall_0_1() { return cLCURLYTerminalRuleCall_0_1; }

		//children+=ParallelStatement
		public Assignment getChildrenAssignment_0_2() { return cChildrenAssignment_0_2; }

		//ParallelStatement
		public RuleCall getChildrenParallelStatementParserRuleCall_0_2_0() { return cChildrenParallelStatementParserRuleCall_0_2_0; }

		//RCURLY
		public RuleCall getRCURLYTerminalRuleCall_0_3() { return cRCURLYTerminalRuleCall_0_3; }

		//LPAREN children+=ParallelStatement RPAREN
		public Group getGroup_1() { return cGroup_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_0() { return cLPARENTerminalRuleCall_1_0; }

		//children+=ParallelStatement
		public Assignment getChildrenAssignment_1_1() { return cChildrenAssignment_1_1; }

		//ParallelStatement
		public RuleCall getChildrenParallelStatementParserRuleCall_1_1_0() { return cChildrenParallelStatementParserRuleCall_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2() { return cRPARENTerminalRuleCall_1_2; }
	}

	public class ParallelStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParallelStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParallelStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cChildrenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cChildrenSequenceStatementParserRuleCall_1_0_0 = (RuleCall)cChildrenAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cVERTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cChildrenSequenceStatementParserRuleCall_1_1_1_0 = (RuleCall)cChildrenAssignment_1_1_1.eContents().get(0);
		
		////Un parallel contiene una o pi sequenze separate da VERT '|'
		//ParallelStatement:
		//	{ParallelStatement} (children+=SequenceStatement (VERT children+=SequenceStatement)*);
		public ParserRule getRule() { return rule; }

		//{ParallelStatement} (children+=SequenceStatement (VERT children+=SequenceStatement)*)
		public Group getGroup() { return cGroup; }

		//{ParallelStatement}
		public Action getParallelStatementAction_0() { return cParallelStatementAction_0; }

		//children+=SequenceStatement (VERT children+=SequenceStatement)*
		public Group getGroup_1() { return cGroup_1; }

		//children+=SequenceStatement
		public Assignment getChildrenAssignment_1_0() { return cChildrenAssignment_1_0; }

		//SequenceStatement
		public RuleCall getChildrenSequenceStatementParserRuleCall_1_0_0() { return cChildrenSequenceStatementParserRuleCall_1_0_0; }

		//(VERT children+=SequenceStatement)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//VERT
		public RuleCall getVERTTerminalRuleCall_1_1_0() { return cVERTTerminalRuleCall_1_1_0; }

		//children+=SequenceStatement
		public Assignment getChildrenAssignment_1_1_1() { return cChildrenAssignment_1_1_1; }

		//SequenceStatement
		public RuleCall getChildrenSequenceStatementParserRuleCall_1_1_1_0() { return cChildrenSequenceStatementParserRuleCall_1_1_1_0; }
	}

	public class SequenceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SequenceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cChildrenAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cChildrenBasicStatementParserRuleCall_1_0_0 = (RuleCall)cChildrenAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cSEMICOLONTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cChildrenBasicStatementParserRuleCall_1_1_1_0 = (RuleCall)cChildrenAssignment_1_1_1.eContents().get(0);
		
		////Un sequence contiente uno o pi basic statemente separati da SEMICOLON ';'
		//SequenceStatement:
		//	{SequenceStatement} (children+=BasicStatement (SEMICOLON children+=BasicStatement)*);
		public ParserRule getRule() { return rule; }

		//{SequenceStatement} (children+=BasicStatement (SEMICOLON children+=BasicStatement)*)
		public Group getGroup() { return cGroup; }

		//{SequenceStatement}
		public Action getSequenceStatementAction_0() { return cSequenceStatementAction_0; }

		//children+=BasicStatement (SEMICOLON children+=BasicStatement)*
		public Group getGroup_1() { return cGroup_1; }

		//children+=BasicStatement
		public Assignment getChildrenAssignment_1_0() { return cChildrenAssignment_1_0; }

		//BasicStatement
		public RuleCall getChildrenBasicStatementParserRuleCall_1_0_0() { return cChildrenBasicStatementParserRuleCall_1_0_0; }

		//(SEMICOLON children+=BasicStatement)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//SEMICOLON
		public RuleCall getSEMICOLONTerminalRuleCall_1_1_0() { return cSEMICOLONTerminalRuleCall_1_1_0; }

		//children+=BasicStatement
		public Assignment getChildrenAssignment_1_1_1() { return cChildrenAssignment_1_1_1; }

		//BasicStatement
		public RuleCall getChildrenBasicStatementParserRuleCall_1_1_1_0() { return cChildrenBasicStatementParserRuleCall_1_1_1_0; }
	}

	public class BasicStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cProcessAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cProcessAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cProcessProcessParserRuleCall_0_1_0 = (RuleCall)cProcessAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssignStatementAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAssignStatementAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAssignStatementAssignStatementParserRuleCall_1_1_0 = (RuleCall)cAssignStatementAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cNDChoiceStatementAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNDChoiceStatementAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNDChoiceStatementNDChoiceStatementParserRuleCall_2_1_0 = (RuleCall)cNDChoiceStatementAssignment_2_1.eContents().get(0);
		
		////Il basicStatement,  un costrutto base, ma pu anche essere un processo (questa produzione permette la ricorsione di parallel e sequence) 
		//BasicStatement:
		//	{Process} process=Process //Questa  la regola che mi permette la ricorsione
		//	| {AssignStatement} assignStatement=AssignStatement | {NDChoiceStatement} NDChoiceStatement+=NDChoiceStatement;
		public ParserRule getRule() { return rule; }

		//{Process} process=Process //Questa  la regola che mi permette la ricorsione
		//| {AssignStatement} assignStatement=AssignStatement | {NDChoiceStatement} NDChoiceStatement+=NDChoiceStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Process} process=Process
		public Group getGroup_0() { return cGroup_0; }

		//{Process}
		public Action getProcessAction_0_0() { return cProcessAction_0_0; }

		//process=Process
		public Assignment getProcessAssignment_0_1() { return cProcessAssignment_0_1; }

		//Process
		public RuleCall getProcessProcessParserRuleCall_0_1_0() { return cProcessProcessParserRuleCall_0_1_0; }

		//{AssignStatement} assignStatement=AssignStatement
		public Group getGroup_1() { return cGroup_1; }

		//{AssignStatement}
		public Action getAssignStatementAction_1_0() { return cAssignStatementAction_1_0; }

		//assignStatement=AssignStatement
		public Assignment getAssignStatementAssignment_1_1() { return cAssignStatementAssignment_1_1; }

		//AssignStatement
		public RuleCall getAssignStatementAssignStatementParserRuleCall_1_1_0() { return cAssignStatementAssignStatementParserRuleCall_1_1_0; }

		//{NDChoiceStatement} NDChoiceStatement+=NDChoiceStatement
		public Group getGroup_2() { return cGroup_2; }

		//{NDChoiceStatement}
		public Action getNDChoiceStatementAction_2_0() { return cNDChoiceStatementAction_2_0; }

		//NDChoiceStatement+=NDChoiceStatement
		public Assignment getNDChoiceStatementAssignment_2_1() { return cNDChoiceStatementAssignment_2_1; }

		//NDChoiceStatement
		public RuleCall getNDChoiceStatementNDChoiceStatementParserRuleCall_2_1_0() { return cNDChoiceStatementNDChoiceStatementParserRuleCall_2_1_0; }
	}

	public class AssignStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariablePathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariablePathVariablePathParserRuleCall_1_0 = (RuleCall)cVariablePathAssignment_1.eContents().get(0);
		private final RuleCall cASSIGNTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cRightSideAssignAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightSideAssignRightSideAssignamentParserRuleCall_3_0 = (RuleCall)cRightSideAssignAssignment_3.eContents().get(0);
		
		//AssignStatement:
		//	{AssignStatement} variablePath=VariablePath ASSIGN rightSideAssign=RightSideAssignament;
		public ParserRule getRule() { return rule; }

		//{AssignStatement} variablePath=VariablePath ASSIGN rightSideAssign=RightSideAssignament
		public Group getGroup() { return cGroup; }

		//{AssignStatement}
		public Action getAssignStatementAction_0() { return cAssignStatementAction_0; }

		//variablePath=VariablePath
		public Assignment getVariablePathAssignment_1() { return cVariablePathAssignment_1; }

		//VariablePath
		public RuleCall getVariablePathVariablePathParserRuleCall_1_0() { return cVariablePathVariablePathParserRuleCall_1_0; }

		//ASSIGN
		public RuleCall getASSIGNTerminalRuleCall_2() { return cASSIGNTerminalRuleCall_2; }

		//rightSideAssign=RightSideAssignament
		public Assignment getRightSideAssignAssignment_3() { return cRightSideAssignAssignment_3; }

		//RightSideAssignament
		public RuleCall getRightSideAssignRightSideAssignamentParserRuleCall_3_0() { return cRightSideAssignRightSideAssignamentParserRuleCall_3_0; }
	}

	public class RightSideAssignamentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RightSideAssignament");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//RightSideAssignament:
		//	{Expression} expression=Expression;
		public ParserRule getRule() { return rule; }

		//{Expression} expression=Expression
		public Group getGroup() { return cGroup; }

		//{Expression}
		public Action getExpressionAction_0() { return cExpressionAction_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOperationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cOpPLUSTerminalRuleCall_1_1_0_0 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cOpMINUSTerminalRuleCall_1_1_0_1 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(1);
		private final RuleCall cOpASTERISKTerminalRuleCall_1_1_0_2 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(2);
		private final RuleCall cOpDIVIDETerminalRuleCall_1_1_0_3 = (RuleCall)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// *********************************************ESPRESSIONI ARITMETICHE********************************************* /
		//Expression:
		//	TerminalExpression ({Operation.left=current} op=(PLUS | MINUS | ASTERISK | DIVIDE) right=Expression)?;
		public ParserRule getRule() { return rule; }

		//TerminalExpression ({Operation.left=current} op=(PLUS | MINUS | ASTERISK | DIVIDE) right=Expression)?
		public Group getGroup() { return cGroup; }

		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }

		//({Operation.left=current} op=(PLUS | MINUS | ASTERISK | DIVIDE) right=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{Operation.left=current}
		public Action getOperationLeftAction_1_0() { return cOperationLeftAction_1_0; }

		//op=(PLUS | MINUS | ASTERISK | DIVIDE)
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//PLUS | MINUS | ASTERISK | DIVIDE
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//PLUS
		public RuleCall getOpPLUSTerminalRuleCall_1_1_0_0() { return cOpPLUSTerminalRuleCall_1_1_0_0; }

		//MINUS
		public RuleCall getOpMINUSTerminalRuleCall_1_1_0_1() { return cOpMINUSTerminalRuleCall_1_1_0_1; }

		//ASTERISK
		public RuleCall getOpASTERISKTerminalRuleCall_1_1_0_2() { return cOpASTERISKTerminalRuleCall_1_1_0_2; }

		//DIVIDE
		public RuleCall getOpDIVIDETerminalRuleCall_1_1_0_3() { return cOpDIVIDETerminalRuleCall_1_1_0_3; }

		//right=Expression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Expression
		public RuleCall getRightExpressionParserRuleCall_1_2_0() { return cRightExpressionParserRuleCall_1_2_0; }
	}

	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cRealLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueREALTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cPrefixAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cPrefixPrefixParserRuleCall_4_0_0 = (RuleCall)cPrefixAssignment_4_0.eContents().get(0);
		private final Assignment cVariablePathAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablePathVariablePathParserRuleCall_4_1_0 = (RuleCall)cVariablePathAssignment_4_1.eContents().get(0);
		private final Assignment cPrefixAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPrefixPrefixParserRuleCall_4_2_0 = (RuleCall)cPrefixAssignment_4_2.eContents().get(0);
		
		//TerminalExpression returns Expression:
		//	LPAREN Expression RPAREN | {IntLiteral} value=INT | {RealLiteral} value=REAL | {String} value=STRING | prefix=Prefix
		//	variablePath=VariablePath prefix=Prefix;
		public ParserRule getRule() { return rule; }

		//LPAREN Expression RPAREN | {IntLiteral} value=INT | {RealLiteral} value=REAL | {String} value=STRING | prefix=Prefix
		//variablePath=VariablePath prefix=Prefix
		public Alternatives getAlternatives() { return cAlternatives; }

		//LPAREN Expression RPAREN
		public Group getGroup_0() { return cGroup_0; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_0() { return cLPARENTerminalRuleCall_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_2() { return cRPARENTerminalRuleCall_0_2; }

		//{IntLiteral} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntLiteral}
		public Action getIntLiteralAction_1_0() { return cIntLiteralAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{RealLiteral} value=REAL
		public Group getGroup_2() { return cGroup_2; }

		//{RealLiteral}
		public Action getRealLiteralAction_2_0() { return cRealLiteralAction_2_0; }

		//value=REAL
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//REAL
		public RuleCall getValueREALTerminalRuleCall_2_1_0() { return cValueREALTerminalRuleCall_2_1_0; }

		//{String} value=STRING
		public Group getGroup_3() { return cGroup_3; }

		//{String}
		public Action getStringAction_3_0() { return cStringAction_3_0; }

		//value=STRING
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_3_1_0() { return cValueSTRINGTerminalRuleCall_3_1_0; }

		//prefix=Prefix variablePath=VariablePath prefix=Prefix
		public Group getGroup_4() { return cGroup_4; }

		//prefix=Prefix
		public Assignment getPrefixAssignment_4_0() { return cPrefixAssignment_4_0; }

		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_4_0_0() { return cPrefixPrefixParserRuleCall_4_0_0; }

		//variablePath=VariablePath
		public Assignment getVariablePathAssignment_4_1() { return cVariablePathAssignment_4_1; }

		//VariablePath
		public RuleCall getVariablePathVariablePathParserRuleCall_4_1_0() { return cVariablePathVariablePathParserRuleCall_4_1_0; }

		//prefix=Prefix
		public Assignment getPrefixAssignment_4_2() { return cPrefixAssignment_4_2; }

		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_4_2_0() { return cPrefixPrefixParserRuleCall_4_2_0; }
	}

	public class VariablePathElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariablePath");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariablePathAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final RuleCall cGLOBALTerminalRuleCall_1_0_0 = (RuleCall)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cAlternatives_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cLSQUARETerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cChildrenExpressionParserRuleCall_1_1_1_0 = (RuleCall)cChildrenAssignment_1_1_1.eContents().get(0);
		private final RuleCall cRSQUARETerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cDOTTerminalRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Alternatives cAlternatives_1_2_1 = (Alternatives)cGroup_1_2.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_2_1_0 = (RuleCall)cAlternatives_1_2_1.eContents().get(0);
		private final Group cGroup_1_2_1_1 = (Group)cAlternatives_1_2_1.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_2_1_1_0 = (RuleCall)cGroup_1_2_1_1.eContents().get(0);
		private final Assignment cChildrenAssignment_1_2_1_1_1 = (Assignment)cGroup_1_2_1_1.eContents().get(1);
		private final RuleCall cChildrenExpressionParserRuleCall_1_2_1_1_1_0 = (RuleCall)cChildrenAssignment_1_2_1_1_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_2_1_1_2 = (RuleCall)cGroup_1_2_1_1.eContents().get(2);
		
		//VariablePath:
		//	{VariablePath} ((GLOBAL | ID) (LSQUARE children+=Expression RSQUARE)? (DOT (ID | LPAREN children+=Expression
		//	RPAREN))*);
		public ParserRule getRule() { return rule; }

		//{VariablePath} ((GLOBAL | ID) (LSQUARE children+=Expression RSQUARE)? (DOT (ID | LPAREN children+=Expression RPAREN))*)
		public Group getGroup() { return cGroup; }

		//{VariablePath}
		public Action getVariablePathAction_0() { return cVariablePathAction_0; }

		//(GLOBAL | ID) (LSQUARE children+=Expression RSQUARE)? (DOT (ID | LPAREN children+=Expression RPAREN))*
		public Group getGroup_1() { return cGroup_1; }

		//GLOBAL | ID
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//GLOBAL
		public RuleCall getGLOBALTerminalRuleCall_1_0_0() { return cGLOBALTerminalRuleCall_1_0_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }

		//(LSQUARE children+=Expression RSQUARE)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//LSQUARE
		public RuleCall getLSQUARETerminalRuleCall_1_1_0() { return cLSQUARETerminalRuleCall_1_1_0; }

		//children+=Expression
		public Assignment getChildrenAssignment_1_1_1() { return cChildrenAssignment_1_1_1; }

		//Expression
		public RuleCall getChildrenExpressionParserRuleCall_1_1_1_0() { return cChildrenExpressionParserRuleCall_1_1_1_0; }

		//RSQUARE
		public RuleCall getRSQUARETerminalRuleCall_1_1_2() { return cRSQUARETerminalRuleCall_1_1_2; }

		//(DOT (ID | LPAREN children+=Expression RPAREN))*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//DOT
		public RuleCall getDOTTerminalRuleCall_1_2_0() { return cDOTTerminalRuleCall_1_2_0; }

		//ID | LPAREN children+=Expression RPAREN
		public Alternatives getAlternatives_1_2_1() { return cAlternatives_1_2_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_2_1_0() { return cIDTerminalRuleCall_1_2_1_0; }

		//LPAREN children+=Expression RPAREN
		public Group getGroup_1_2_1_1() { return cGroup_1_2_1_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_2_1_1_0() { return cLPARENTerminalRuleCall_1_2_1_1_0; }

		//children+=Expression
		public Assignment getChildrenAssignment_1_2_1_1_1() { return cChildrenAssignment_1_2_1_1_1; }

		//Expression
		public RuleCall getChildrenExpressionParserRuleCall_1_2_1_1_1_0() { return cChildrenExpressionParserRuleCall_1_2_1_1_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_2_1_1_2() { return cRPARENTerminalRuleCall_1_2_1_1_2; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHOICETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDECREMENTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Prefix returns ecore::EString:
		//	(CHOICE | DECREMENT)?;
		public ParserRule getRule() { return rule; }

		//(CHOICE | DECREMENT)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHOICE
		public RuleCall getCHOICETerminalRuleCall_0() { return cCHOICETerminalRuleCall_0; }

		//DECREMENT
		public RuleCall getDECREMENTTerminalRuleCall_1() { return cDECREMENTTerminalRuleCall_1; }
	}

	public class NDChoiceStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NDChoiceStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNDChoiceStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLSQUARETerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cInputOperationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInputOperationInputOperationParserRuleCall_1_1_0 = (RuleCall)cInputOperationAssignment_1_1.eContents().get(0);
		private final RuleCall cRSQUARETerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cMainProcessAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cMainProcessMainProcessParserRuleCall_1_3_0 = (RuleCall)cMainProcessAssignment_1_3.eContents().get(0);
		
		/// ****************************************************************************************************************** /
		/// *********************************************NDChoiceStatement********************************************* /
		//NDChoiceStatement:
		//	{NDChoiceStatement} (LSQUARE InputOperation+=InputOperation RSQUARE mainProcess+=MainProcess)*;
		public ParserRule getRule() { return rule; }

		//{NDChoiceStatement} (LSQUARE InputOperation+=InputOperation RSQUARE mainProcess+=MainProcess)*
		public Group getGroup() { return cGroup; }

		//{NDChoiceStatement}
		public Action getNDChoiceStatementAction_0() { return cNDChoiceStatementAction_0; }

		//(LSQUARE InputOperation+=InputOperation RSQUARE mainProcess+=MainProcess)*
		public Group getGroup_1() { return cGroup_1; }

		//LSQUARE
		public RuleCall getLSQUARETerminalRuleCall_1_0() { return cLSQUARETerminalRuleCall_1_0; }

		//InputOperation+=InputOperation
		public Assignment getInputOperationAssignment_1_1() { return cInputOperationAssignment_1_1; }

		//InputOperation
		public RuleCall getInputOperationInputOperationParserRuleCall_1_1_0() { return cInputOperationInputOperationParserRuleCall_1_1_0; }

		//RSQUARE
		public RuleCall getRSQUARETerminalRuleCall_1_2() { return cRSQUARETerminalRuleCall_1_2; }

		//mainProcess+=MainProcess
		public Assignment getMainProcessAssignment_1_3() { return cMainProcessAssignment_1_3; }

		//MainProcess
		public RuleCall getMainProcessMainProcessParserRuleCall_1_3_0() { return cMainProcessMainProcessParserRuleCall_1_3_0; }
	}

	public class InputOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLINKINTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cRPARENTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInputOperationAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Action cVariablePathAction_1_3 = (Action)cGroup_1.eContents().get(3);
		private final Assignment cVariablePathAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVariablePathVariablePathParserRuleCall_1_4_0 = (RuleCall)cVariablePathAssignment_1_4.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final RuleCall cRequestResponseOperationParserRuleCall_1_6 = (RuleCall)cGroup_1.eContents().get(6);
		
		////line 1689 OLParser
		//InputOperation:
		//	{InputOperation} LINKIN LPAREN ID RPAREN | {InputOperation} ID LPAREN {VariablePath} variablePath=VariablePath RPAREN
		//	RequestResponseOperation?;
		public ParserRule getRule() { return rule; }

		//{InputOperation} LINKIN LPAREN ID RPAREN | {InputOperation} ID LPAREN {VariablePath} variablePath=VariablePath RPAREN
		//RequestResponseOperation?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{InputOperation} LINKIN LPAREN ID RPAREN
		public Group getGroup_0() { return cGroup_0; }

		//{InputOperation}
		public Action getInputOperationAction_0_0() { return cInputOperationAction_0_0; }

		//LINKIN
		public RuleCall getLINKINTerminalRuleCall_0_1() { return cLINKINTerminalRuleCall_0_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0_2() { return cLPARENTerminalRuleCall_0_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_3() { return cIDTerminalRuleCall_0_3; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_0_4() { return cRPARENTerminalRuleCall_0_4; }

		//{InputOperation} ID LPAREN {VariablePath} variablePath=VariablePath RPAREN RequestResponseOperation?
		public Group getGroup_1() { return cGroup_1; }

		//{InputOperation}
		public Action getInputOperationAction_1_0() { return cInputOperationAction_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_1_2() { return cLPARENTerminalRuleCall_1_2; }

		//{VariablePath}
		public Action getVariablePathAction_1_3() { return cVariablePathAction_1_3; }

		//variablePath=VariablePath
		public Assignment getVariablePathAssignment_1_4() { return cVariablePathAssignment_1_4; }

		//VariablePath
		public RuleCall getVariablePathVariablePathParserRuleCall_1_4_0() { return cVariablePathVariablePathParserRuleCall_1_4_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_1_5() { return cRPARENTerminalRuleCall_1_5; }

		//RequestResponseOperation?
		public RuleCall getRequestResponseOperationParserRuleCall_1_6() { return cRequestResponseOperationParserRuleCall_1_6; }
	}

	public class RequestResponseOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequestResponseOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cMainProcessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMainProcessMainProcessParserRuleCall_3_0 = (RuleCall)cMainProcessAssignment_3.eContents().get(0);
		
		//RequestResponseOperation:
		//	LPAREN expression=Expression RPAREN mainProcess=MainProcess;
		public ParserRule getRule() { return rule; }

		//LPAREN expression=Expression RPAREN mainProcess=MainProcess
		public Group getGroup() { return cGroup; }

		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_0() { return cLPARENTerminalRuleCall_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_2() { return cRPARENTerminalRuleCall_2; }

		//mainProcess=MainProcess
		public Assignment getMainProcessAssignment_3() { return cMainProcessAssignment_3; }

		//MainProcess
		public RuleCall getMainProcessMainProcessParserRuleCall_3_0() { return cMainProcessMainProcessParserRuleCall_3_0; }
	}
	
	
	private ProgramElements pProgram;
	private MainElements pMain;
	private MainProcessElements pMainProcess;
	private ProcessElements pProcess;
	private ParallelStatementElements pParallelStatement;
	private SequenceStatementElements pSequenceStatement;
	private BasicStatementElements pBasicStatement;
	private AssignStatementElements pAssignStatement;
	private RightSideAssignamentElements pRightSideAssignament;
	private ExpressionElements pExpression;
	private TerminalExpressionElements pTerminalExpression;
	private VariablePathElements pVariablePath;
	private PrefixElements pPrefix;
	private NDChoiceStatementElements pNDChoiceStatement;
	private InputOperationElements pInputOperation;
	private RequestResponseOperationElements pRequestResponseOperation;
	private TerminalRule tLCURLY;
	private TerminalRule tRCURLY;
	private TerminalRule tLSQUARE;
	private TerminalRule tRSQUARE;
	private TerminalRule tARROW;
	private TerminalRule tSEMICOLON;
	private TerminalRule tCOLON;
	private TerminalRule tPLUS;
	private TerminalRule tVERT;
	private TerminalRule tASSIGN;
	private TerminalRule tDOT;
	private TerminalRule tLPAREN;
	private TerminalRule tRPAREN;
	private TerminalRule tCOMMA;
	private TerminalRule tLINKIN;
	private TerminalRule tWHILE;
	private TerminalRule tCHOICE;
	private TerminalRule tDECREMENT;
	private TerminalRule tASTERISK;
	private TerminalRule tDIVIDE;
	private TerminalRule tMINUS;
	private TerminalRule tPERCENT_SIGN;
	private TerminalRule tGLOBAL;
	private TerminalRule tREAL;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JolieGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program: / * (locations=Locations)* * / "main" main=Main;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	/// *  
	//Locations :
	//ASSIGN
	// ('inputPort' name=ID LCURLY (locations=LocationDefinition) RCURLY) &
	// ('outputPort' name=ID LCURLY (locations=LocationDefinition) RCURLY)
	//
	//;
	//
	//LocationDefinition :
	// ('location' address=Address) & 'protocol' (protocol=Protocol) & (interfaces=Interfaces)*
	//;
	//
	//
	//Interfaces :
	// 'Interfaces' name=ID
	//;
	//
	//terminal Protocol :
	// 'sodep' | 'soap' | 'http'
	//;  
	// 
	//terminal Address : 
	// '"'('//') ((('a'..'z'|'A'..'Z'|'_'|'0'..'9')*'.'('a'..'z'|'A'..'Z'|'_'|'0'..'9')*)*':'('0'..'9')*) '"'
	//
	// ;
	// * /Main:
	//	mainrocess=MainProcess;
	public MainElements getMainAccess() {
		return (pMain != null) ? pMain : (pMain = new MainElements());
	}
	
	public ParserRule getMainRule() {
		return getMainAccess().getRule();
	}

	////Il processo principale, {...} del main
	//MainProcess:
	//	{OLSyntaxNode} LCURLY parallelStatement=ParallelStatement RCURLY;
	public MainProcessElements getMainProcessAccess() {
		return (pMainProcess != null) ? pMainProcess : (pMainProcess = new MainProcessElements());
	}
	
	public ParserRule getMainProcessRule() {
		return getMainProcessAccess().getRule();
	}

	////Il processo generale inseribile a piacimento nel codice {...},(...)
	//Process:
	//	{Process} LCURLY children+=ParallelStatement RCURLY | LPAREN children+=ParallelStatement RPAREN;
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	////Un parallel contiene una o pi sequenze separate da VERT '|'
	//ParallelStatement:
	//	{ParallelStatement} (children+=SequenceStatement (VERT children+=SequenceStatement)*);
	public ParallelStatementElements getParallelStatementAccess() {
		return (pParallelStatement != null) ? pParallelStatement : (pParallelStatement = new ParallelStatementElements());
	}
	
	public ParserRule getParallelStatementRule() {
		return getParallelStatementAccess().getRule();
	}

	////Un sequence contiente uno o pi basic statemente separati da SEMICOLON ';'
	//SequenceStatement:
	//	{SequenceStatement} (children+=BasicStatement (SEMICOLON children+=BasicStatement)*);
	public SequenceStatementElements getSequenceStatementAccess() {
		return (pSequenceStatement != null) ? pSequenceStatement : (pSequenceStatement = new SequenceStatementElements());
	}
	
	public ParserRule getSequenceStatementRule() {
		return getSequenceStatementAccess().getRule();
	}

	////Il basicStatement,  un costrutto base, ma pu anche essere un processo (questa produzione permette la ricorsione di parallel e sequence) 
	//BasicStatement:
	//	{Process} process=Process //Questa  la regola che mi permette la ricorsione
	//	| {AssignStatement} assignStatement=AssignStatement | {NDChoiceStatement} NDChoiceStatement+=NDChoiceStatement;
	public BasicStatementElements getBasicStatementAccess() {
		return (pBasicStatement != null) ? pBasicStatement : (pBasicStatement = new BasicStatementElements());
	}
	
	public ParserRule getBasicStatementRule() {
		return getBasicStatementAccess().getRule();
	}

	//AssignStatement:
	//	{AssignStatement} variablePath=VariablePath ASSIGN rightSideAssign=RightSideAssignament;
	public AssignStatementElements getAssignStatementAccess() {
		return (pAssignStatement != null) ? pAssignStatement : (pAssignStatement = new AssignStatementElements());
	}
	
	public ParserRule getAssignStatementRule() {
		return getAssignStatementAccess().getRule();
	}

	//RightSideAssignament:
	//	{Expression} expression=Expression;
	public RightSideAssignamentElements getRightSideAssignamentAccess() {
		return (pRightSideAssignament != null) ? pRightSideAssignament : (pRightSideAssignament = new RightSideAssignamentElements());
	}
	
	public ParserRule getRightSideAssignamentRule() {
		return getRightSideAssignamentAccess().getRule();
	}

	/// *********************************************ESPRESSIONI ARITMETICHE********************************************* /
	//Expression:
	//	TerminalExpression ({Operation.left=current} op=(PLUS | MINUS | ASTERISK | DIVIDE) right=Expression)?;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//TerminalExpression returns Expression:
	//	LPAREN Expression RPAREN | {IntLiteral} value=INT | {RealLiteral} value=REAL | {String} value=STRING | prefix=Prefix
	//	variablePath=VariablePath prefix=Prefix;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return (pTerminalExpression != null) ? pTerminalExpression : (pTerminalExpression = new TerminalExpressionElements());
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}

	//VariablePath:
	//	{VariablePath} ((GLOBAL | ID) (LSQUARE children+=Expression RSQUARE)? (DOT (ID | LPAREN children+=Expression
	//	RPAREN))*);
	public VariablePathElements getVariablePathAccess() {
		return (pVariablePath != null) ? pVariablePath : (pVariablePath = new VariablePathElements());
	}
	
	public ParserRule getVariablePathRule() {
		return getVariablePathAccess().getRule();
	}

	//Prefix returns ecore::EString:
	//	(CHOICE | DECREMENT)?;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	/// ****************************************************************************************************************** /
	/// *********************************************NDChoiceStatement********************************************* /
	//NDChoiceStatement:
	//	{NDChoiceStatement} (LSQUARE InputOperation+=InputOperation RSQUARE mainProcess+=MainProcess)*;
	public NDChoiceStatementElements getNDChoiceStatementAccess() {
		return (pNDChoiceStatement != null) ? pNDChoiceStatement : (pNDChoiceStatement = new NDChoiceStatementElements());
	}
	
	public ParserRule getNDChoiceStatementRule() {
		return getNDChoiceStatementAccess().getRule();
	}

	////line 1689 OLParser
	//InputOperation:
	//	{InputOperation} LINKIN LPAREN ID RPAREN | {InputOperation} ID LPAREN {VariablePath} variablePath=VariablePath RPAREN
	//	RequestResponseOperation?;
	public InputOperationElements getInputOperationAccess() {
		return (pInputOperation != null) ? pInputOperation : (pInputOperation = new InputOperationElements());
	}
	
	public ParserRule getInputOperationRule() {
		return getInputOperationAccess().getRule();
	}

	//RequestResponseOperation:
	//	LPAREN expression=Expression RPAREN mainProcess=MainProcess;
	public RequestResponseOperationElements getRequestResponseOperationAccess() {
		return (pRequestResponseOperation != null) ? pRequestResponseOperation : (pRequestResponseOperation = new RequestResponseOperationElements());
	}
	
	public ParserRule getRequestResponseOperationRule() {
		return getRequestResponseOperationAccess().getRule();
	}

	/// ****************************************************************************************************************** / // Terminals
	//terminal LCURLY:
	//	"{";
	public TerminalRule getLCURLYRule() {
		return (tLCURLY != null) ? tLCURLY : (tLCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY"));
	} 

	//terminal RCURLY:
	//	"}";
	public TerminalRule getRCURLYRule() {
		return (tRCURLY != null) ? tRCURLY : (tRCURLY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY"));
	} 

	//terminal LSQUARE:
	//	"[";
	public TerminalRule getLSQUARERule() {
		return (tLSQUARE != null) ? tLSQUARE : (tLSQUARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LSQUARE"));
	} 

	//terminal RSQUARE:
	//	"]";
	public TerminalRule getRSQUARERule() {
		return (tRSQUARE != null) ? tRSQUARE : (tRSQUARE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RSQUARE"));
	} 

	//terminal ARROW:
	//	"->";
	public TerminalRule getARROWRule() {
		return (tARROW != null) ? tARROW : (tARROW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ARROW"));
	} 

	//terminal SEMICOLON:
	//	";";
	public TerminalRule getSEMICOLONRule() {
		return (tSEMICOLON != null) ? tSEMICOLON : (tSEMICOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SEMICOLON"));
	} 

	//terminal COLON:
	//	":";
	public TerminalRule getCOLONRule() {
		return (tCOLON != null) ? tCOLON : (tCOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COLON"));
	} 

	//terminal PLUS:
	//	"+";
	public TerminalRule getPLUSRule() {
		return (tPLUS != null) ? tPLUS : (tPLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PLUS"));
	} 

	//terminal VERT:
	//	"|";
	public TerminalRule getVERTRule() {
		return (tVERT != null) ? tVERT : (tVERT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "VERT"));
	} 

	////terminal SESSIONDECL: 'session';
	////terminal STARTS: 'starts';
	////terminal ONE_WAY: 'OneWay';
	////terminal REQUEST_RESPONSE: 'RequestResponse';
	//terminal ASSIGN:
	//	"=";
	public TerminalRule getASSIGNRule() {
		return (tASSIGN != null) ? tASSIGN : (tASSIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASSIGN"));
	} 

	//terminal DOT:
	//	".";
	public TerminalRule getDOTRule() {
		return (tDOT != null) ? tDOT : (tDOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOT"));
	} 

	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return (tLPAREN != null) ? tLPAREN : (tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LPAREN"));
	} 

	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return (tRPAREN != null) ? tRPAREN : (tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "RPAREN"));
	} 

	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return (tCOMMA != null) ? tCOMMA : (tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA"));
	} 

	//terminal LINKIN:
	//	"linkIn";
	public TerminalRule getLINKINRule() {
		return (tLINKIN != null) ? tLINKIN : (tLINKIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LINKIN"));
	} 

	//terminal WHILE:
	//	"while";
	public TerminalRule getWHILERule() {
		return (tWHILE != null) ? tWHILE : (tWHILE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WHILE"));
	} 

	//terminal CHOICE:
	//	"++";
	public TerminalRule getCHOICERule() {
		return (tCHOICE != null) ? tCHOICE : (tCHOICE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHOICE"));
	} 

	//terminal DECREMENT:
	//	"--";
	public TerminalRule getDECREMENTRule() {
		return (tDECREMENT != null) ? tDECREMENT : (tDECREMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECREMENT"));
	} 

	//terminal ASTERISK:
	//	"*";
	public TerminalRule getASTERISKRule() {
		return (tASTERISK != null) ? tASTERISK : (tASTERISK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ASTERISK"));
	} 

	//terminal DIVIDE:
	//	"/";
	public TerminalRule getDIVIDERule() {
		return (tDIVIDE != null) ? tDIVIDE : (tDIVIDE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIVIDE"));
	} 

	/// *terminal POINTS_TO:  '->';
	//terminal DEEP_COPY_LEFT :  '<<';* /terminal MINUS:
	//	"-";
	public TerminalRule getMINUSRule() {
		return (tMINUS != null) ? tMINUS : (tMINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MINUS"));
	} 

	//terminal PERCENT_SIGN:
	//	"%";
	public TerminalRule getPERCENT_SIGNRule() {
		return (tPERCENT_SIGN != null) ? tPERCENT_SIGN : (tPERCENT_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PERCENT_SIGN"));
	} 

	//terminal GLOBAL:
	//	"global";
	public TerminalRule getGLOBALRule() {
		return (tGLOBAL != null) ? tGLOBAL : (tGLOBAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GLOBAL"));
	} 

	//terminal REAL:
	//	"0".."9"* "." "0".."9"+ (("e" | "E") "0".."9"+)?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
